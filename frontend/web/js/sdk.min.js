(function () {
    var sdk = window.AWY_SDK || {};
    sdk.clientVersion = "4.0 build 201709181450";
    sdk.gameId = 0;
    sdk.token = null;
    sdk.frames = {};
    sdk.gameInfo = null;
    sdk.shareQRInfo = null;
    sdk.headImg = null;
    sdk.shareCB = null;
    sdk.payCB = null;
    sdk.init = function () {
        sdk.token = sdk.getURLVar("token")
    };
    sdk.wxInit = function (args) {
        sdk.postTopMessage({
            cmd: "wxInit",
            args: args
        }, "*")
    };
    sdk.config = function (gameId, shareCallback, payCallback) {
        if (gameId) {
            sdk.gameId = gameId
        }
        if (shareCallback) {
            sdk.shareCB = shareCallback
        }
        if (payCallback) {
            sdk.payCB = payCallback
        }
        window.addEventListener("message", function (event) {
            switch (event.data.cmd) {
                case "onShare":
                {
                    if (sdk.shareCB) {
                        sdk.shareCB(event.data.args)
                    }
                    break
                }
                case "onPay":
                {
                    if (sdk.payCB) {
                        sdk.payCB(event.data.args)
                    }
                    break
                }
            }
        }, false);
        sdk.postTopMessage({
            cmd: "config"
        }, "*")
    };
    sdk.setShareCB = function (shareCallback) {
        sdk.shareCB = shareCallback
    };
    sdk.setPayCB = function (payCallback) {
        sdk.payCB = payCallback
    };
    sdk.logout = function () {
        sdk.postTopMessage({
            cmd: "logout"
        }, "*")
    };
    sdk.showFocus = sdk.focus = function (args) {
        sdk.postTopMessage({
            cmd: "showFocus",
            args: args
        }, "*")
    };
    sdk.showShare = sdk.share = function (fingerURL, bodyURL) {
        sdk.postTopMessage({
            cmd: "showShare",
            args: {
                finger: fingerURL,
                body: bodyURL
            }
        }, "*")
    };
    sdk.pay = sdk.jumpPay = function (args) {
        if (!sdk.isAllowPay()) {
            alert("支付系统暂不可用！")
        } else {
            sdk.postTopMessage({
                cmd: "pay",
                args: args
            }, "*")
        }
    };
    sdk.shareTitle = function (title) {
        sdk.postTopMessage({
            cmd: "shareTitle",
            args: title
        }, "*")
    };
    sdk.shareIcon = function (url) {
        sdk.postTopMessage({
            cmd: "shareIcon",
            args: url
        }, "*")
    };
    sdk.shareDesc = function (desc) {
        sdk.postTopMessage({
            cmd: "shareDesc",
            args: desc
        }, "*")
    };
    sdk.shareParams = function (params) {
        sdk.postTopMessage({
            cmd: "shareParams",
            args: params
        }, "*")
    };
    sdk.setChatPrevent = function (args) {
        sdk.postTopMessage({
            cmd: "chatPrevent",
            args: args
        }, "*")
    };
    sdk.getShareBackup = function (callback) {
        function __getShareDomainCB(event) {
            window.removeEventListener("message", __getShareDomainCB, false);
            switch (event.data.cmd) {
                case "getShareDomain":
                {
                    callback(event.data.args);
                    break
                }
            }
        }
        window.addEventListener("message", __getShareDomainCB, false);
        sdk.postTopMessage({
            cmd: "getShareDomain"
        }, "*")
    };
    sdk.showFriend = function () {
        sdk.postTopMessage({
            cmd: "showFriend"
        }, "*")
    };
    sdk.hideFriend = function () {
        sdk.postTopMessage({
            cmd: "hideFriend"
        }, "*")
    };
    sdk.copy = function (text) {
        sdk.postTopMessage({
            cmd: "copy",
            args: text
        }, "*")
    };
    sdk.showTopImg = function (args) {
        sdk.postTopMessage({
            cmd: "showTopImg",
            args: args
        }, "*")
    };
    sdk.joinChatRoom = function () {
        sdk.postTopMessage({
            cmd: "joinChat"
        }, "*")
    };
    sdk.bindCash = function () {
        sdk.postTopMessage({
            cmd: "bindCash"
        }, "*")
    };
    sdk.gotoBBS = function () {
        window.top.location.href = "https://buluo.qq.com/mobile/barindex.html?_bid=128&_wv=1027&bid=397446"
    };
    sdk.downAvyApp = function () {
        sdk.postTopMessage({
            cmd: "downAvyApp"
        }, "*")
    };
    sdk.refresh = function () {
        sdk.postTopMessage({
            cmd: "refresh"
        }, "*")
    };
    sdk.moreGame = function () {
        sdk.postTopMessage({
            cmd: "moreGame"
        }, "*")
    };
    sdk.stat = function (item, sub_item, sub_sec_item) {
        var args = {};
        if (item) {
            args["item"] = item;
            if (sub_item) {
                args["sub_item"] = sub_item;
                if (sub_sec_item) {
                    args["sub_sec_item"] = sub_sec_item
                }
            }
            sdk.postTopMessage({
                cmd: "stat",
                args: args
            }, "*")
        }
    };
    sdk.getGameInfo = function (callback) {
        if (sdk.gameInfo) {
            callback(sdk.gameInfo)
        } else {
            sdk.httpGet("https://api.11h5.com/conf?cmd=getGameInfo&gameid=" + sdk.gameId + "&" + Date.now(), function (data) {
                sdk.gameInfo = data;
                callback(sdk.gameInfo)
            }, "json")
        }
    };
    sdk.getShareQRInfo = function (callback, args) {
        function __getShareQRInfoCB(event) {
            window.removeEventListener("message", __getShareQRInfoCB, false);
            switch (event.data.cmd) {
                case "getShareQRInfo":
                {
                    callback(event.data.args);
                    break
                }
            }
        }
        window.addEventListener("message", __getShareQRInfoCB, false);
        sdk.postTopMessage({
            cmd: "getShareQRInfo",
            args: args
        }, "*")
    };
    sdk.getHeadImg = function (callback) {
        if (sdk.headImg) {
            callback(sdk.headImg)
        } else {
            sdk.httpGet("https://api.11h5.com/login?cmd=getHeadImg&token=" + sdk.token + "&" + Date.now(), function (data) {
                sdk.headImg = data.data;
                callback(sdk.headImg)
            }, "json")
        }
    };
    sdk.getServerURL = function (callback) {
        sdk.getGameInfo(function (data) {
            if (data) {
                var serverURL = data["ext"] ? data["ext"]["serverURL"] : null;
                if (serverURL) {
                    serverURL = decodeURIComponent(serverURL);
                    var resultURL = serverURL;
                    var serverList = serverURL.split("|");
                    if (serverList.length > 1) {
                        resultURL = serverList[Math.floor(Math.random() * serverList.length)]
                    }
                    callback(resultURL)
                } else {
                    callback(null)
                }
            } else {
                callback(null)
            }
        })
    };
    sdk.isQQ = function () {
        return navigator.userAgent.toLowerCase().match(/\bqq\b/i) == "qq"
    };
    sdk.isWeixin = function () {
        return navigator.userAgent.toLowerCase().match(/MicroMessenger/i) == "micromessenger"
    };
    sdk.isAndroid = function () {
        return navigator.userAgent.indexOf("Android") > -1 || navigator.userAgent.indexOf("Linux") > -1
    };
    sdk.isiOS = function () {
        return !!navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)
    };
    sdk.isPCWeixin = function () {
        return navigator.userAgent.toLowerCase().match(/WindowsWechat/i) == "windowswechat"
    };
    sdk.isMobile = function () {
        var userAgent = navigator.userAgent.toLowerCase();
        var agents = ["android", "iphone", "symbianos", "windows phone", "ipad", "ipod"];
        for (var v = 0; v < agents.length; v++) {
            if (userAgent.indexOf(agents[v]) > 0) {
                return true
            }
        }
        return false
    };
    sdk.isAvuAPP = function () {
        return navigator.userAgent.toLowerCase().match(/Avu/i) == "avu"
    };
    sdk.isAvuboxAPP = function () {
        return navigator.userAgent.toLowerCase().match(/Avubox/i) == "avubox"
    };
    sdk.isAllowPay = function () {
        return navigator.userAgent.indexOf("Nopay") == -1
    };
    sdk.isSafari = function () {
        return navigator.userAgent.indexOf("Safari") > -1
    };
    sdk.isDesktopApp = function () {
        return navigator.standalone
    };
    sdk.saveGameDesktop = function () {
        sdk.postTopMessage({
            cmd: "saveGame"
        }, "*")
    };
    sdk.getURLQuery = function (url) {
        var query = {};
        if (url) {
            var search = url.split("?")[1];
            if (search) {
                var pairs = search.split("&");
                for (var i = 0; i < pairs.length; i++) {
                    query[pairs[i].split("=")[0]] = unescape(pairs[i].split("=")[1])
                }
            }
        }
        return query
    };
    sdk.getURLVar = function (name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        var r = window.location.search.substr(1).match(reg);
        return r != null ? unescape(r[2]) : null
    };
    sdk.setURLVar = function (url, key, value) {
        if (url) {
            var urlList = url.split("#");
            var params = {};
            var query = urlList[0].split("?")[1];
            var result = urlList[0].split("?")[0] + "?";
            if (query) {
                query = query.split("&");
                for (var i in query) {
                    var vars = query[i].split("=");
                    params[vars[0]] = vars[1]
                }
            }
            if (value) {
                params[key] = value
            } else {
                params[key] = null;
                delete params[key]
            }
            var first = true;
            for (var i in params) {
                result += (first ? "" : "&") + i + "=" + (params[i] ? params[i] : "");
                first = false
            }
            return result + (urlList[1] ? "#" + urlList[1] : "")
        }
        return ""
    };
    sdk.cleanURLVar = function (url) {
        if (url) {
            return url.split("?")[0]
        }
        return ""
    };
    sdk.setItem = function (key, value) {
        if (window.localStorage) {
            try {
                window.localStorage.setItem("yg_" + key, value)
            } catch (err) {}
        } else {
            var exp = new Date;
            exp.setTime(exp.getTime() + 365 * 24 * 60 * 60 * 1e3);
            document.cookie = "yg_" + key + "=" + escape(value) + ";expires=" + exp.toGMTString()
        }
    };
    sdk.getItem = function (key) {
        if (window.localStorage) {
            return window.localStorage.getItem("yg_" + key)
        } else {
            var arr = document.cookie.match(new RegExp("(^| )yg_" + key + "=([^;]*)(;|$)"));
            if (arr != null) {
                return unescape(arr[2])
            }
        }
        return null
    };
    sdk.removeItem = function (key) {
        if (window.localStorage) {
            window.localStorage.removeItem("yg_" + key)
        } else {
            var exp = new Date;
            exp.setTime(exp.getTime() - 1);
            var cval = sdk.getItem(key);
            if (cval != null) {
                document.cookie = "yg_" + key + "=" + cval + ";expires=" + exp.toGMTString()
            }
        }
    };
    sdk.setSession = function (key, value) {
        if (window.sessionStorage) {
            window.sessionStorage.setItem("yg_" + key, value)
        }
    };
    sdk.getSession = function (key) {
        if (window.sessionStorage) {
            return window.sessionStorage.getItem("yg_" + key)
        }
        return null
    };
    sdk.removeSession = function (key) {
        if (window.sessionStorage) {
            window.sessionStorage.removeItem("yg_" + key)
        }
    };
    sdk.buildURL = function (url, args) {
        if (url) {
            var urlList = url.split("#");
            var params = {};
            var query = urlList[0].split("?")[1];
            var result = urlList[0].split("?")[0] + "?";
            if (query) {
                query = query.split("&");
                for (var i in query) {
                    var vars = query[i].split("=");
                    params[vars[0]] = vars[1]
                }
            }
            for (var i in args) {
                if (args[i]) {
                    params[i] = args[i]
                }
            }
            var first = true;
            for (var i in params) {
                result += (first ? "" : "&") + i + "=" + (params[i] ? params[i] : "");
                first = false
            }
            return result + (urlList[1] ? "#" + urlList[1] : "")
        }
        return ""
    };
    sdk.randomString = function (len) {
        len = len || 32;
        var allChars = "abcdefghijklmnopqrstuvwxyz";
        var count = allChars.length;
        var str = "";
        for (var i = 0; i < len; i++) {
            str += allChars.charAt(Math.floor(Math.random() * count))
        }
        return str
    };
    sdk.randomNumber = function (len) {
        len = len || 8;
        var allChars = "0123456789";
        var count = allChars.length;
        var str = "";
        for (var i = 0; i < len; i++) {
            str += allChars.charAt(Math.floor(Math.random() * count))
        }
        return str
    };
    sdk.createFrame = function (name, src) {
        if (!sdk.frames[name]) {
            sdk.frames[name] = document.createElement("iframe");
            sdk.frames[name].name = name;
            sdk.frames[name].src = src;
            sdk.frames[name].style.display = "none";
            document.body.appendChild(sdk.frames[name])
        } else {
            sdk.frames[name].src = src
        }
    };
    sdk.loadSingleScript = function (src, callback) {
        var node = document.createElement("script");
        node.src = src;
        if (node.hasOwnProperty("async")) {
            node.async = false
        }
        node.addEventListener("load", function () {
            this.removeEventListener("load", arguments.callee, false);
            if (callback) {
                callback()
            }
        }, false);
        document.body.appendChild(node)
    };
    sdk.appendSingleScript = function (src, isBody) {
        var parentNode = document.getElementsByTagName(isBody ? "body" : "head").item(0);
        var node = document.createElement("script");
        node.type = "text/javascript";
        node.src = src;
        parentNode.appendChild(node)
    };
    sdk.createQRCode = function (url, width, height, callback) {
        function __createQRCode() {
            var div = document.createElement("div");
            var qrcode = new QRCode(div, {
                width: width,
                height: height,
                typeNumber: -1
            });
            qrcode.makeCode(url);
            var img = div.getElementsByTagName("img")[0];
            img.onload = function () {
                img.onload = null;
                callback(img.src)
            }
        }
        if (window.QRCode) {
            __createQRCode()
        } else {
            sdk.loadSingleScript("//cdn.11h5.com/static/js/qrcode.min.js", function () {
                __createQRCode()
            })
        }
    };
    sdk.startRecord = function (callback) {
        function __startRecordCB(event) {
            if (event.data.cmd == "startRecord") {
                window.removeEventListener("message", __startRecordCB, false);
                if (callback) {
                    callback(event.data.args)
                }
            }
        }
        window.addEventListener("message", __startRecordCB, false);
        sdk.postTopMessage({
            cmd: "startRecord"
        }, "*")
    };
    sdk.stopRecord = function (callback) {
        function __stopRecordCB(event) {
            if (event.data.cmd == "stopRecord") {
                window.removeEventListener("message", __stopRecordCB, false);
                callback(event.data.args)
            }
        }
        window.addEventListener("message", __stopRecordCB, false);
        sdk.postTopMessage({
            cmd: "stopRecord"
        }, "*")
    };
    sdk.uploadVoice = function (localId, callback) {
        function __uploadVoiceCB(event) {
            if (event.data.cmd == "uploadVoice") {
                window.removeEventListener("message", __uploadVoiceCB, false);
                callback(event.data.args)
            }
        }
        window.addEventListener("message", __uploadVoiceCB, false);
        sdk.postTopMessage({
            cmd: "uploadVoice",
            args: localId
        }, "*")
    };
    sdk.downloadVoice = function (serverId, callback) {
        function __downloadVoiceCB(event) {
            if (event.data.cmd == "downloadVoice") {
                window.removeEventListener("message", __downloadVoiceCB, false);
                callback(event.data.args)
            }
        }
        window.addEventListener("message", __downloadVoiceCB, false);
        sdk.postTopMessage({
            cmd: "downloadVoice",
            args: serverId
        }, "*")
    };
    sdk.playVoice = function (localId, callback) {
        function __playVoiceCB(event) {
            if (event.data.cmd == "playVoice") {
                window.removeEventListener("message", __playVoiceCB, false);
                callback(event.data.args)
            }
        }
        window.addEventListener("message", __playVoiceCB, false);
        sdk.postTopMessage({
            cmd: "playVoice",
            args: localId
        }, "*")
    };
    sdk.stopVoice = function (localId) {
        sdk.postTopMessage({
            cmd: "stopVoice",
            args: localId
        }, "*")
    };
    sdk.__onAddShortcut = function (event) {
        if (event.data.cmd == "onAddShortcut") {
            window.removeEventListener("message", sdk.__onAddShortcut, false);
            sdk.__onAddShortcutCB()
        }
    };
    sdk.addShortcut = function (callback) {
        sdk.__onAddShortcutCB = callback;
        window.removeEventListener("message", sdk.__onAddShortcut, false);
        window.addEventListener("message", sdk.__onAddShortcut, false);
        sdk.postTopMessage({
            cmd: "addShortcut"
        }, "*")
    };
    sdk.httpGet = function (url, callback, option) {
        var request = null;
        if (window.XMLHttpRequest) {
            request = new XMLHttpRequest
        } else {
            request = new ActiveXObject("Microsoft.XMLHTTP")
        } if (request) {
            request.onreadystatechange = function () {
                if (request.readyState == 4) {
                    callback(option == "json" ? JSON.parse(request.responseText) : request.responseText)
                }
            };
            request.open("GET", url, true);
            request.send()
        }
    };
    sdk.postTopMessage = function (message, target) {
        window.top.postMessage(message, target)
    };
    sdk.init();
    window.AWY_SDK = sdk
})();
var sdk = window.AWY_SDK;